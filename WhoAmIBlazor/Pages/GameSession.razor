@page "/game/{id}";
@using WhoAmIGameLogic;
@using WhoAmIBlazor.GameManagment;
@using Blazored.LocalStorage;
@inject IGameManager GameManager;
@inject ILocalStorageService localStorageService;
@inject NavigationManager NavManager;

<div class="container-lg">
    @if (game != null && round != null)
    {
        <div class="row" style="min-height:500px">
            <div class="col-12 col-sm-3" style="border-right:1px solid lightgray">
                <div class="flex-column">
                    @foreach (var player in this.game.Players)
                    {
                        <div class="card mb-3" style="@(player==this.round.CurrentPlayer?"border-color:green":"")">
                            <div class="row no-gutters">
                                <div class="col-md-4 @(player.CorrectGuess?"bg-success":"bg-danger")">
                                </div>

                                @if (player == _player)
                                {
                                    <div class="col-md-8">
                                        <div class="card-body text-primary">
                                            <h5 class="card-title">@player.DisplayName (you)</h5>
                                            <p class="card-text">Unknown</p>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="col-md-8">
                                        <div class="card-body">
                                            <h5 class="card-title">@player.DisplayName</h5>
                                            <p class="card-text">@player.RoleName</p>
                                        </div>
                                    </div>
                                }


                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="col-12 col-sm-6" style="height:100%">
                <div class="flex-column" style="height:100%; width:100%">
                    <div class="countdownround">
                        <h2 style="width:100%; text-align:center">@this.round.TimeRemaining</h2>
                    </div>
                    @if (this.round.CurrentPlayer == _player)
                    {
                        <div class="row">
                            <div class="col-6 flex-column">
                                <h2>Your previous Questions: </h2>
                                @foreach (var item in _player.Guesses)
                                {
                                    <div class="guess" style="border-bottom:1px solid lightgray">
                                        @item.Item1
                                        <span style="color:@(item.Item2?"green":"red")">
                                            @(item.Item2 ? "True" : "False")
                                        </span>
                                    </div>
                                }
                            </div>
                            <div class="col-6 flex-column">
                                <h2>Your Move: </h2>
                                @if (String.IsNullOrWhiteSpace(this.round.Question))
                                {
                                    <div class="input-group mb-3">
                                        <div class="input-group-prepend">
                                            <button class="btn @(this.round.QType==QuestionTypes.Question?"btn-primary":"brn-outline-primary")" type="button" @onclick="BtnQuestionClick">Question</button>
                                        </div>

                                        <div class="input-group-append">
                                            <button class="btn @(this.round.QType==QuestionTypes.Guess?"btn-primary":"brn-outline-primary")" type="button" @onclick="BtnGuessClick">Guess</button>
                                        </div>
                                    </div>
                                    <div class="input-group mb-3">

                                        <input type="text" class="form-control" @bind="question" placeholder="Proposal" aria-label="Proposal" aria-describedby="basic-addon2">
                                        <div class="input-group-append">
                                            <button class="btn btn-outline-primary" @onclick="SubmitQuestion" type="button">&rarr;</button>
                                        </div>

                                    </div>
                                }
                                else
                                {
                                    <div class="input-group mb-3">
                                        <div class="input-group-prepend">
                                            <button class="btn @(this.round.QType==QuestionTypes.Question?"btn-primary":"brn-outline-primary")" type="button" disabled>Question</button>
                                        </div>

                                        <div class="input-group-append">
                                            <button class="btn @(this.round.QType==QuestionTypes.Guess?"btn-primary":"brn-outline-primary")" type="button" disabled>Guess</button>
                                        </div>
                                    </div>
                                    <div class="input-group mb-3">

                                        <input type="text" class="form-control" @bind="question" placeholder="Proposal" aria-label="Proposal" aria-describedby="basic-addon2" disabled>
                                        <div class="input-group-append">
                                            <button class="btn btn-outline-primary" type="button" disabled>&rarr;</button>
                                        </div>
                                    </div>
                                }
                                <div class="result" style="display:flex; justify-content:center; align-items:center">
                                    <div class="input-group mb-3">
                                        <div class="input-group-prepend">
                                            <button class="btn btn-success" disabled>@this.round.PlayerAnswers.Item1.Count</button>
                                        </div>

                                        <div class="input-group-append">
                                            <button class="btn btn-danger" disabled>@this.round.PlayerAnswers.Item2.Count</button>

                                        </div>
                                    </div>
                                </div>
                            </div>

                        </div>
                    }
                    else
                    {
                        <div class="flex-column">
                            @if (this.round.QType == QuestionTypes.Guess)
                            {
                                <div class="guess">
                                    <b>Guess: </b>@round.Question
                                </div>
                            }
                            else
                            {
                                <div class="question">
                                    <b>Question: </b>@round.Question
                                </div>
                            }
                            @if (!String.IsNullOrWhiteSpace(this.round.Question))
                            {
                                <div class="result" style="display:flex; justify-content:center; align-items:center; width:100%; min-height:300px;">
                                    <div class="input-group mb-3">
                                        <div class="input-group-prepend">
                                            <button class="btn @(!this.round.PlayerAnswers.Item1.Contains(_player)?"btn-outline-success":"btn-success")" @onclick="()=> { SubmitWhatYouThink(true);  }">@this.round.PlayerAnswers.Item1.Count</button>
                                        </div>

                                        <div class="input-group-append">
                                            <button class="btn @(!this.round.PlayerAnswers.Item2.Contains(_player)?"btn-outline-danger":"btn-danger")" @onclick="()=> { SubmitWhatYouThink(false); }">@this.round.PlayerAnswers.Item2.Count</button>
                                        </div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div>Waiting for question ...</div>
                            }
                        </div>
                    }
                </div>

            </div>
            <div class="col-12 col-sm-3" style="border-left:1px solid gray">
                <div class="chat" style="display:flex; flex-direction:column-reverse; height:80vh; overflow-y:scroll">
                    @foreach (var item in this.game.Chat.Messages)
                    {

                        <div class="chatitem" style="margin-top:20px; background-color:@(item.Item1 == _player ? "lightgreen" : "none")">
                            <b>@item.Item1.DisplayName: </b>
                            <span class="msg">@item.Item2</span>
                        </div>
                    }
                </div>
                <div class="chat-input">
                    <div class="input-group mb-3">
                        <input type="text" class="form-control" @bind="chatmessage" @onkeydown="ChatKeyPressed" placeholder="Proposal" aria-label="Proposal" aria-describedby="basic-addon2">
                        <div class="input-group-append">
                            <button class="btn btn-outline-primary" @onclick="SendMessage" type="button">&rarr;</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="waiting-text">Waiting ...</div>
    }
</div>

@code {
    private string question;

    public void SubmitQuestion()
    {
        this.round.Question = this.question;
    }
    public void BtnQuestionClick()
    {
        this.round.QType = QuestionTypes.Question;
    }
    public void BtnGuessClick()
    {
        this.round.QType = QuestionTypes.Guess;
    }

    public void SubmitWhatYouThink(bool thinksyes)
    {
        this.round.Answer(_player, thinksyes);
    }


    private Game game;
    [Parameter]
    public string Id { get; set; }

    private Player _player { get; set; }
    private Round round { get; set; }

    private string chatmessage = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Init();
        }
    }
    private async Task Init()
    {
        this.game = this.GameManager.GetGame(Id);
        this.round = game.Round;
        if (game == null)
        {
            GameDoesNotExist();
            return;
        }
        string playerId = await localStorageService.GetItemAsync<string>(StorageKeys.PlayerId);
        _player = this.game.Players.FirstOrDefault(item => item.PlayerId == playerId);
        MapGameState();
        if (_player == null)
        {
            PlayerNotInGame();
            return;

        }
        StateHasChanged();
        this.game.StateChanged += async (obj, ev) =>
        {
            await InvokeAsync(() =>
            {
                StateHasChanged();
                this.round = game.Round;
            });
        };
    }
    public void PlayerNotInGame()
    {
        NavManager.NavigateTo("/");
    }
    public void GameDoesNotExist()
    {
        NavManager.NavigateTo("/");
    }
    public void SendMessage()
    {
        if (String.IsNullOrWhiteSpace(this.chatmessage))
            return;
        string msg = this.chatmessage;
        this.chatmessage = "";
        this.game.Chat.AddMessage(_player, msg);
    }
    void ChatKeyPressed(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            SendMessage();
        }
    }
    private void MapGameState()
    {
        if (game == null)
        {
            NavManager.NavigateTo("/");
            return;
        }
        if (game.GameState == GameState.Idle)
        {
            NavManager.NavigateTo("/lobby/" + Id);
        }
        else if (game.GameState == GameState.Finished)
        {
#warning Route to the "Finished"-Page here
        }
    }
}
